AWSTemplateFormatVersion: "2010-09-09"

#------------------------------------------------------
# Parameters
#------------------------------------------------------
Parameters:
  ProjectName:
    Type: String
  Env:
    Type: String
  
  BackendPort:
    Type: Number
  FrontendPort:
    Type: Number
  
  VpcIdOutput:
    Type: String
  PrivateAppSubnet1IdOutput:
    Description: Name of the PrivateAppSubnet1Id Output
    Type: String
  PrivateAppSubnet2IdOutput:
    Description: Name of the PrivateAppSubnet2Id Output
    Type: String
  
  EcsAutoScalingRoleArnOutput:
    Type: String
  
  BackendTargetGroupArnOutput:
    Type: String
  FrontendTargetGroupArnOutput:
    Type: String
  
  BackendTaskDefinitionArnOutput:
    Type: String
  FrontendTaskDefinitionArnOutput:
    Type: String

Mappings:
  TaskDefinitions:
    Backend:
      Name: backend
      Cpu: 256
      Memory: 512
      DesiredCount: 1
    Frontend:
      Name: frontend
      Cpu: 256
      Memory: 512
      DesiredCount: 1

#------------------------------------------------------
# ECS Resources
#------------------------------------------------------
Resources:
  #------------------------------------------------------
  # ECS Service SGs
  #------------------------------------------------------
  EcsBackendServiceSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${ProjectName}-${Env}-backend-sg
      GroupDescription: Security group for ECS Backend Service
      VpcId: 
        Fn::ImportValue: !Ref VpcIdOutput
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref BackendPort
          ToPort: !Ref BackendPort
          CidrIp: "0.0.0.0/0"
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Env}-backend-sg"
        - Key: Environment
          Value: !Ref Env

  EcsFrontendServiceSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${ProjectName}-${Env}-frontend-sg
      GroupDescription: Security group for ECS Frontend Service
      VpcId: 
        Fn::ImportValue: !Ref VpcIdOutput
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref FrontendPort
          ToPort: !Ref FrontendPort
          CidrIp: "0.0.0.0/0"
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Env}-frontend-sg"
        - Key: Environment
          Value: !Ref Env
  
  #------------------------------------------------------
  # ECS Cluster
  #------------------------------------------------------
  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${ProjectName}-${Env}-ecs-cluster
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Env}-ecs-cluster"
        - Key: Environment
          Value: !Ref Env

  #------------------------------------------------------
  # ECS Services
  #------------------------------------------------------
  EcsBackendService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub ${ProjectName}-${Env}-backend-service
      TaskDefinition:
        Fn::ImportValue: !Ref BackendTaskDefinitionArnOutput   
      Cluster: !Ref EcsCluster
      LaunchType: FARGATE
      DesiredCount: !FindInMap [TaskDefinitions, Backend, DesiredCount]
      DeploymentController:
        Type: ECS
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups: 
            - !Ref EcsBackendServiceSg
          Subnets:
            - Fn::ImportValue: !Ref PrivateAppSubnet1IdOutput
            - Fn::ImportValue: !Ref PrivateAppSubnet2IdOutput
      LoadBalancers:
        - ContainerName: !FindInMap [TaskDefinitions, Backend, Name]
          ContainerPort: !Ref BackendPort
          TargetGroupArn:
            Fn::ImportValue: !Ref BackendTargetGroupArnOutput
      HealthCheckGracePeriodSeconds: 60
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Env}-backend-service"
        - Key: Environment
          Value: !Ref Env

  EcsFrontendService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub ${ProjectName}-${Env}-frontend-service
      TaskDefinition:
        Fn::ImportValue: !Ref FrontendTaskDefinitionArnOutput   
      Cluster: !Ref EcsCluster
      LaunchType: FARGATE
      DesiredCount: !FindInMap [TaskDefinitions, Frontend, DesiredCount]
      DeploymentController:
        Type: ECS
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups: 
            - !Ref EcsFrontendServiceSg
          Subnets:
            - Fn::ImportValue: !Ref PrivateAppSubnet1IdOutput
            - Fn::ImportValue: !Ref PrivateAppSubnet2IdOutput
      LoadBalancers:
        - ContainerName: !FindInMap [TaskDefinitions, Frontend, Name]
          ContainerPort: !Ref FrontendPort
          TargetGroupArn: 
            Fn::ImportValue: !Ref FrontendTargetGroupArnOutput
      HealthCheckGracePeriodSeconds: 60
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Env}-frontend-service"
        - Key: Environment
          Value: !Ref Env

  #------------------------------------------------------
  # ECS Scaling Targets
  #------------------------------------------------------
  BackendServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: EcsBackendService
    Properties:
      MaxCapacity: 4
      MinCapacity: 1
      ResourceId:  !Sub "service/${ProjectName}-${Env}-ecs-cluster/${ProjectName}-${Env}-backend-service"
      RoleARN:
        Fn::ImportValue: !Ref EcsAutoScalingRoleArnOutput
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  FrontendServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: EcsFrontendService
    Properties:
      MaxCapacity: 4
      MinCapacity: 1
      ResourceId: !Sub "service/${ProjectName}-${Env}-ecs-cluster/${ProjectName}-${Env}-frontend-service"
      RoleARN: 
        Fn::ImportValue: !Ref EcsAutoScalingRoleArnOutput
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  #------------------------------------------------------
  # ECS Scaling Policies
  #------------------------------------------------------
  BackendServiceScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: AverageMemoryUtilizationPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref BackendServiceScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 80.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageMemoryUtilization

  FrontendServiceScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: AverageMemoryUtilizationPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref FrontendServiceScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 80.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageMemoryUtilization