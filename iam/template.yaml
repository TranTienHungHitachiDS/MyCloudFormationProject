AWSTemplateFormatVersion: "2010-09-09"

#------------------------------------------------------
# Parameters
#------------------------------------------------------
Parameters:
  ProjectName:
    Type: String
  Env:
    Type: String
    Default: dev

#------------------------------------------------------
# IAM Roles and Policies
#------------------------------------------------------
Resources:
  #------------------------------------------------------
  # Roles and Policies For RDS database
  #------------------------------------------------------
  RdsProxyRole:
    UpdateReplacePolicy: Delete
    Type: AWS::IAM::Role
    DeletionPolicy: Delete
    Properties:
      RoleName: !Sub ${ProjectName}-${Env}-rds-proxy-role
      Path: /service-role/
      Description: Allows RDS Proxy access to database connection credentials
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: rds.amazonaws.com
  
  RdsProxyPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub ${ProjectName}-${Env}-rds-proxy-policy
      Path: /service-role/
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Resource: "*"
            Action:
              - secretsmanager:GetSecretValue
              - rds-db:connect
              - rds:DescribeDBProxies
              - rds:DescribeDBProxyTargetGroups
              - rds:RegisterDBProxyTargets
              - rds:DeregisterDBProxyTargets
            Effect: Allow
            Sid: SecretManagerAndRdsPermissions
          - Sid: DecryptSecretValue
            Condition:
              StringEquals:
                kms:ViaService: secretsmanager.ap-southeast-1.amazonaws.com
            Resource: "*"
            Action:
              - kms:Decrypt
            Effect: Allow
      Roles:
        - !Ref RdsProxyRole

  #------------------------------------------------------
  # Lambda Execution Roles
  #------------------------------------------------------
  MyLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-${Env}-lambda-execution-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  #------------------------------------------------------
  # Ecs Roles
  #------------------------------------------------------
  EcsTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-${Env}-ecs-task-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "sts:AssumeRole"
            Principal:
              Service: ecs-tasks.amazonaws.com
      Policies:
        - PolicyName: SsmMessagesAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ssmmessages:CreateControlChannel"
                  - "ssmmessages:CreateDataChannel"
                  - "ssmmessages:OpenControlChannel"
                  - "ssmmessages:OpenDataChannel"
                Resource: "*"
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Env}-ecs-task-role
        - Key: Environment
          Value: !Ref Env

  EcsTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-${Env}-ecs-task-execution-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "sts:AssumeRole"
            Principal:
              Service: ecs-tasks.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: SecretManagerAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "secretsmanager:GetSecretValue"
                  - "secretsmanager:DescribeSecret"
                Resource: "*"
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Env}-ecs-task-execution-role
        - Key: Environment
          Value: !Ref Env

  EcsAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-${Env}-ecs-autoscaling-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs.application-autoscaling.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: MyAutoscalingECSServicePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecs:DescribeServices
                  - ecs:UpdateService
                  - cloudwatch:PutMetricAlarm
                  - cloudwatch:PutMetricAlarm
                  - cloudwatch:PutMetricAlarm
                Resource: "*"
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Env}-ecs-autoscaling-role
        - Key: Environment
          Value: !Ref Env

#------------------------------------------------------
# Outputs 
#------------------------------------------------------
Outputs:
  RdsProxyRoleArn:
    Description: Eds Proxy Role Arn
    Value: !GetAtt RdsProxyRole.Arn
    Export:
      Name: !Sub ${ProjectName}-${Env}-rds-proxy-role-arn
  MyLambdaExecutionRoleArn:
    Description: Lambda execution role arn of 'my lambda app'
    Value: !GetAtt MyLambdaExecutionRole.Arn
    Export:
      Name: !Sub ${ProjectName}-${Env}-my-lambda-execution-role-arn
  EcsTaskRoleArn:
    Description: Ecs Task Role Arn
    Value: !GetAtt EcsTaskRole.Arn
    Export:
      Name: !Sub ${ProjectName}-${Env}-ecs-task-role-arn
  EcsTaskExecutionRoleArn:
    Description: Ecs Task Execution Role Arn
    Value: !GetAtt EcsTaskExecutionRole.Arn
    Export:
      Name: !Sub ${ProjectName}-${Env}-ecs-task-execution-role-arn
  EcsAutoScalingRoleArn:
    Description: Ecs Auto Scaling Role Arn
    Value: !GetAtt EcsAutoScalingRole.Arn
    Export:
      Name: !Sub ${ProjectName}-${Env}-ecs-auto-scaling-role-arn