# AWSTemplateFormatVersion: "2010-09-09"

# #------------------------------------------------------
# # Parameters
# #------------------------------------------------------
# Parameters:
#   ProjectName:
#     Type: String
#   Env:
#     Type: String
  
#   EcsClusterId:
#     Type: String
#   BackendTaskDefinitionArn:
#     Type: String
#   FrontendTaskDefinitionArn:
#     Type: String
  
#   BackendDesiredCount:
#     Type: Number
#     Default: 1
#   FrontendDesiredCount:
#     Type: Number
#     Default: 1
  
#   BackendContainerName:
#     Type: String
#   FrontendContainerName:
#     Type: String

#   EcsBackendServiceSgId:
#     Type: String
#   EcsFrontendServiceSgId:
#     Type: String

#   PrivateAppSubnetIds:
#     Type: String

# #------------------------------------------------------
# # ECS Services
# #------------------------------------------------------
# Resources:
#   EcsBackendService:
#     Type: AWS::ECS::Service
#     Properties:
#       ServiceName: !Sub ${ProjectName}-${Env}-backend-service
#       TaskDefinition: !Ref BackendTaskDefinitionArn
#       Cluster: !Ref EcsClusterId
#       LaunchType: FARGATE
#       DesiredCount: !Ref BackendDesiredCount
#       DeploymentController:
#         Type: ECS
#       NetworkConfiguration:
#         AwsvpcConfiguration:
#           SecurityGroups: 
#             - !Ref EcsBackendServiceSgId
#           Subnets: !Split [",", !Ref PrivateAppSubnetIds]
#       LoadBalancers:
#         - ContainerName: !Ref ContainerName
#           ContainerPort: 80
#           TargetGroupArn:
#             Fn::ImportValue: !Sub ${ALBStackName}-target-group
#       HealthCheckGracePeriodSeconds: 60

#   ServiceScalingTarget:
#     Type: AWS::ApplicationAutoScaling::ScalableTarget
#     Properties:
#       MaxCapacity: 4
#       MinCapacity: 1
#       ResourceId:
#         Fn::Join:
#           - /
#           - - service
#             - Fn::ImportValue: !Sub ${ClusterStackName}-ecscluster
#             - !Ref ServiceName
#       RoleARN: !GetAtt AutoScalingRole.Arn
#       ScalableDimension: ecs:service:DesiredCount
#       ServiceNamespace: ecs

#   ServiceScalingPolicy:
#     Type: AWS::ApplicationAutoScaling::ScalingPolicy
#     Properties:
#       PolicyName: AverageCPUUtilizationPolicy
#       PolicyType: TargetTrackingScaling
#       ScalingTargetId: !Ref ServiceScalingTarget
#       TargetTrackingScalingPolicyConfiguration:
#         TargetValue: 80.0
#         ScaleInCooldown: 60
#         ScaleOutCooldown: 60
#         PredefinedMetricSpecification:
#           PredefinedMetricType: ECSServiceAverageCPUUtilization