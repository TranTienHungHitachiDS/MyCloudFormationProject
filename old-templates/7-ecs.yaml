AWSTemplateFormatVersion: "2010-09-09"

#------------------------------------------------------
# Parameters
#------------------------------------------------------
Parameters:
  ProjectName:
    Type: String
  Env:
    Type: String
  
  BackendDockerImage:
    Type: String
    Default: "hungtran679/dkhp_demo-backend-service:ecs"
  FrontendDockerImage:
    Type: String
    Default: "hungtran679/dkhp_demo-frontend-service:ecs"
  
  BackendPort:
    Type: Number
    Default: 8080
  FrontendPort:
    Type: Number
    Default: 80
  
  VpcId:
    Type: String
  PrivateAppSubnetIds:
    Type: String
  
  EcsTaskRoleArn:
    Type: String
  EcsTaskExecutionRoleArn:
    Type: String
  EcsAutoScalingRoleArn:
    Type: String
  
  BackendTargetGroupArn:
    Type: String
  FrontendTargetGroupArn:
    Type: String
  
  EcsBackendServiceSgId:
    Type: String
  EcsFrontendServiceSgId:
    Type: String
  
  DBCredentialSecretArn:
    Description: The database credential secret arn
    Type: String
  DbUser:
    Description: The root database username
    Type: String
    Default: admin
  JDBCConnectionString:
    Description: JDBC connection string for the master database
    Type: String

Mappings:
  TaskDefinitions:
    Backend:
      Name: backend
      Cpu: 256
      Memory: 512
      DesiredCount: 1
    Frontend:
      Name: frontend
      Cpu: 256
      Memory: 512
      DesiredCount: 1

#------------------------------------------------------
# ECS Resources
#------------------------------------------------------
Resources:
  #------------------------------------------------------
  # ECS Cluster
  #------------------------------------------------------
  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${ProjectName}-${Env}-ecs-cluster
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Env}-ecs-cluster"
        - Key: Environment
          Value: !Ref Env

  #------------------------------------------------------
  # ECS Task definitions
  #------------------------------------------------------  
  BackendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${ProjectName}-${Env}-backend-family
      TaskRoleArn: !Ref EcsTaskRoleArn
      ExecutionRoleArn: !Ref EcsTaskExecutionRoleArn
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: !FindInMap [TaskDefinitions, Backend, Cpu]
      Memory: !FindInMap [TaskDefinitions, Backend, Memory]
      ContainerDefinitions:
        - Name: !FindInMap [TaskDefinitions, Backend, Name]
          Image: !Ref BackendDockerImage
          PortMappings:
            - ContainerPort: !Ref BackendPort
          Privileged: false
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !FindInMap [TaskDefinitions, Backend, Name]
          Environment:
            - Name: JDBC_CONN_STRING
              Value: !Ref JDBCConnectionString
            - Name: DB_USER
              Value: !Ref DbUser
          Secrets:
            - Name: DB_PASS
              ValueFrom: !Ref DBCredentialSecretArn
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Env}-backend-task-definition"
        - Key: Environment
          Value: !Ref Env

  FrontendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${ProjectName}-${Env}-frontend-family
      TaskRoleArn: !Ref EcsTaskRoleArn
      ExecutionRoleArn: !Ref EcsTaskExecutionRoleArn
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: !FindInMap [TaskDefinitions, Frontend, Cpu]
      Memory: !FindInMap [TaskDefinitions, Frontend, Memory]
      ContainerDefinitions:
        - Name: !FindInMap [TaskDefinitions, Frontend, Name]
          Image: !Ref FrontendDockerImage
          PortMappings:
            - ContainerPort: !Ref FrontendPort
          Privileged: false
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: frontend
          Environment:
            - Name: API_ENDPOINT
              Value: /
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Env}-frontend-task-definition"
        - Key: Environment
          Value: !Ref Env
  
  #------------------------------------------------------
  # CloudWatch Log Group
  #------------------------------------------------------ 
  LogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub "/ecs/${ProjectName}"  
      RetentionInDays: 7

  #------------------------------------------------------
  # ECS Services
  #------------------------------------------------------
  EcsBackendService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub ${ProjectName}-${Env}-backend-service
      TaskDefinition: !Ref BackendTaskDefinition
      Cluster: !Ref EcsCluster
      LaunchType: FARGATE
      DesiredCount: !FindInMap [TaskDefinitions, Backend, DesiredCount]
      DeploymentController:
        Type: ECS
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups: 
            - !Ref EcsBackendServiceSgId
          Subnets: !Split [",", !Ref PrivateAppSubnetIds]
      LoadBalancers:
        - ContainerName: !FindInMap [TaskDefinitions, Backend, Name]
          ContainerPort: !Ref BackendPort
          TargetGroupArn: !Ref BackendTargetGroupArn
      HealthCheckGracePeriodSeconds: 60
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Env}-backend-service"
        - Key: Environment
          Value: !Ref Env

  EcsFrontendService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub ${ProjectName}-${Env}-frontend-service
      TaskDefinition: !Ref FrontendTaskDefinition
      Cluster: !Ref EcsCluster
      LaunchType: FARGATE
      DesiredCount: !FindInMap [TaskDefinitions, Frontend, DesiredCount]
      DeploymentController:
        Type: ECS
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups: 
            - !Ref EcsFrontendServiceSgId
          Subnets: !Split [",", !Ref PrivateAppSubnetIds]
      LoadBalancers:
        - ContainerName: !FindInMap [TaskDefinitions, Frontend, Name]
          ContainerPort: !Ref FrontendPort
          TargetGroupArn: !Ref FrontendTargetGroupArn
      HealthCheckGracePeriodSeconds: 60
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Env}-frontend-service"
        - Key: Environment
          Value: !Ref Env

  #------------------------------------------------------
  # ECS Scaling Targets
  #------------------------------------------------------
  BackendServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 4
      MinCapacity: 1
      ResourceId:  !Sub "service/${ProjectName}-${Env}-ecs-cluster/${ProjectName}-${Env}-backend-service"
      RoleARN: !Ref EcsAutoScalingRoleArn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  FrontendServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 4
      MinCapacity: 1
      ResourceId: !Sub "service/${ProjectName}-${Env}-ecs-cluster/${ProjectName}-${Env}-frontend-service"
      RoleARN: !Ref EcsAutoScalingRoleArn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  #------------------------------------------------------
  # ECS Scaling Policies
  #------------------------------------------------------
  BackendServiceScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: AverageMemoryUtilizationPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref BackendServiceScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 80.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageMemoryUtilization

  FrontendServiceScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: AverageMemoryUtilizationPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref FrontendServiceScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 80.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageMemoryUtilization